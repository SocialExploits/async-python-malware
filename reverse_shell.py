import argparse
import asyncio

from apm import helpers, shell


async def main() -> None:
    # Create the command line parser
    parser = argparse.ArgumentParser()

    # Add the command line arguments
    parser.add_argument(
        'host',
        help='Host to connect to'
    )
    parser.add_argument(
        '-p',
        '--port',
        default=5730,
        type=int,
        help='Port to connect to (default: 5730)'
    )
    parser.add_argument(
        '-v',
        '--verbose',
        default=0,
        action='count',
        dest='verbosity',
        help='Increase verbosity'
    )

    # Parse the command line arguments
    args = parser.parse_args()

    # Set up the logging
    helpers.set_up_logging(args.verbosity)

    # Initiate the connection asynchronously
    helpers.info_msg(f'Connecting to {args.host}:{args.port}')
    (reader, writer) = await asyncio.open_connection(
        host=args.host, port=args.port
    )

    helpers.debug_msg(f'Entering task group')
    async with asyncio.TaskGroup() as tg:
        # Create the (reverse) shell
        apm_shell = shell.ApmShell(tg, reader, writer)
        apm_shell.start()

        # The async with context handler finishes automatically after all
        # tasks (even those created by shell.start) are finished,
        # so at this point, we're done.
        helpers.debug_msg('At the end of task group')

    helpers.debug_msg('Done with task group')


if __name__ == '__main__':
    asyncio.run(main())
